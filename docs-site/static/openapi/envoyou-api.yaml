openapi: 3.0.3
info:
  title: EnvoyOU Core API
  version: 0.1.0
  description: >-
    Early skeleton of the EnvoyOU public API specification. This is a draft and
    will evolve. Endpoints and schemas are incomplete.
servers:
  - url: https://api.envoyou.com/v1
    description: Production
  - url: https://api-staging.envoyou.com/v1
    description: Staging
  - url: http://localhost:8000/v1
    description: Local Dev
security:
  - ApiKeyAuth: []
  - BearerAuth: []
paths:
  /auth/token:
    post:
      summary: Obtain access token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                    example: bearer
        '401':
          description: Invalid credentials
  /measurements:
    get:
      summary: List recent measurements
      tags: [Measurements]
      parameters:
        - in: query
          name: city
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
            maximum: 500
      responses:
        '200':
          $ref: '#/components/responses/ListMeasurements'
        '400':
          description: Bad request
        '429': { $ref: '#/components/responses/TooManyRequestsError' }
  /stations:
    get:
      summary: List stations
      tags: [Stations]
      responses:
        '200':
          $ref: '#/components/responses/ListStations'
        '429': { $ref: '#/components/responses/TooManyRequestsError' }
  /benchmarks/industry/{code}:
    get:
      summary: Get industry benchmark distribution
      tags: [Benchmarks]
      parameters:
        - in: path
          name: code
          required: true
          schema: { type: string }
        - in: query
          name: metric
          schema: { type: string }
          required: true
        - in: query
          name: window
          schema: { type: string, example: '30d' }
      responses:
        '200':
          description: Benchmark distribution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BenchmarkDistribution'
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '429': { $ref: '#/components/responses/TooManyRequestsError' }
  /benchmarks/peers:
    post:
      summary: Compute peer benchmark for supplied company IDs
      tags: [Benchmarks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [company_ids, metric]
              properties:
                company_ids:
                  type: array
                  items: { type: string }
                  maxItems: 50
                metric: { type: string }
                window: { type: string, example: '90d' }
      responses:
        '200':
          description: Peer benchmark result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerBenchmark'
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '429': { $ref: '#/components/responses/TooManyRequestsError' }
  /alerts:
    get:
      summary: List alert rules
      tags: [Alerts]
      responses:
        '200':
          $ref: '#/components/responses/ListAlertRules'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '429': { $ref: '#/components/responses/TooManyRequestsError' }
    post:
      summary: Create alert rule
      tags: [Alerts]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AlertRuleCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AlertRule' }
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /alerts/{id}:
    delete:
      summary: Delete alert rule
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
  /scenarios/run:
    post:
      summary: Run scenario analysis over a portfolio or company set
      tags: [Scenarios]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioRunRequest'
      responses:
        '200':
          description: Scenario result set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioRunResult'
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /exports/report:
    post:
      summary: Generate sustainability report export bundle
      tags: [Reports]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportExportRequest'
      responses:
        '202':
          $ref: '#/components/responses/AcceptedExport'
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /exports/report/{id}:
    get:
      summary: Get export status / download link
      tags: [Reports]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Export status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExport'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
  /taxonomy/mappings/diff:
    get:
      summary: Diff two taxonomy mapping versions
      tags: [Taxonomy]
      parameters:
        - in: query
          name: from
          required: true
          schema: { type: string }
        - in: query
          name: to
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Mapping diff
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
            X-Request-ID: { $ref: '#/components/headers/RequestID' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyDiff'
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '429': { $ref: '#/components/responses/TooManyRequestsError' }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers:
    RateLimitLimit:
      description: The quota ceiling for the current window.
      schema: { type: integer, example: 1200 }
    RateLimitRemaining:
      description: Requests remaining in the current window.
      schema: { type: integer, example: 1187 }
    RateLimitReset:
      description: Unix epoch seconds when the current window resets.
      schema: { type: integer, example: 1731532800 }
    RequestID:
      description: Unique ID for tracing this request.
      schema: { type: string, example: req_8f3a92 }
    PaginationLimit:
      description: Effective per-page item limit applied.
      schema: { type: integer, example: 50 }
    PaginationNext:
      description: Cursor token for the next page (omit if no further pages).
      schema: { type: string, example: eyJvZmZzZXQiOjE1MH0 }
  schemas:
    Measurement:
      type: object
      properties:
        station_id: { type: string }
        pollutant: { type: string, example: pm25 }
        value: { type: number }
        unit: { type: string, example: "µg/m³" }
        captured_at: { type: string, format: date-time }
        quality_index: { type: integer }
    Station:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        country: { type: string }
        city: { type: string }
        latitude: { type: number }
        longitude: { type: number }
        elevation_m: { type: number }
    BenchmarkDistribution:
      type: object
      properties:
        metric: { type: string }
        window: { type: string }
        percentiles:
          type: object
          additionalProperties: { type: number }
        mean: { type: number }
        median: { type: number }
      example:
        metric: cevs_score
        window: 30d
        percentiles:
          p10: 42.1
          p25: 55.3
          p50: 61.8
          p75: 68.4
          p90: 74.9
        mean: 62.7
        median: 61.8
    PeerBenchmark:
      type: object
      properties:
        metric: { type: string }
        window: { type: string }
        companies:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              score: { type: number }
              percentile: { type: number }
        aggregate:
          type: object
          properties:
            mean: { type: number }
            median: { type: number }
            stddev: { type: number }
      example:
        metric: water_discharge_ppm
        window: 90d
        companies:
          - id: comp_A
            score: 87.2
            percentile: 82
          - id: comp_B
            score: 76.5
            percentile: 61
          - id: comp_C
            score: 69.1
            percentile: 48
        aggregate:
          mean: 77.6
          median: 76.5
          stddev: 7.4
    AlertRuleBase:
      type: object
      properties:
        name: { type: string }
        metric: { type: string }
        operator: { type: string, example: ">" }
        threshold: { type: number }
        window: { type: string, example: "1h" }
        notify: { type: array, items: { type: string } }
        enabled: { type: boolean, default: true }
    AlertRuleCreate:
      allOf:
        - $ref: '#/components/schemas/AlertRuleBase'
    AlertRule:
      allOf:
        - $ref: '#/components/schemas/AlertRuleBase'
        - type: object
          properties:
            id: { type: string }
            created_at: { type: string, format: date-time }
            last_triggered_at: { type: string, format: date-time, nullable: true }
      example:
        id: ar_12345
        name: CEVS Score Drop
        metric: cevs_score
        operator: drop_percent
        threshold: 5
        window: 24h
        notify: ["slack:#esg-risk"]
        enabled: true
        created_at: 2025-09-13T10:20:11Z
        last_triggered_at: null
    ScenarioRunRequest:
      type: object
      required: [targets, shocks]
      properties:
        targets:
          type: array
          items: { type: string }
        shocks:
          type: object
          properties:
            carbon_price: { type: number, example: 120 }
            regulation_delay_years: { type: number, example: 2 }
            intensity_decline_rate: { type: number, example: 0.04 }
        window: { type: string, example: '2030' }
    ScenarioRunResult:
      type: object
      properties:
        run_id: { type: string }
        targets: { type: array, items: { type: string } }
        assumptions: { type: object }
        results:
          type: array
          items:
            type: object
            properties:
              target: { type: string }
              projected_score: { type: number }
              variance_vs_baseline: { type: number }
      example:
        run_id: scen_f83ab2
        targets: [comp_A, comp_B, comp_C]
        assumptions:
          carbon_price: 120
          regulation_delay_years: 2
          intensity_decline_rate: 0.04
        results:
          - target: comp_A
            projected_score: 72.4
            variance_vs_baseline: 3.1
          - target: comp_B
            projected_score: 65.2
            variance_vs_baseline: 1.8
          - target: comp_C
            projected_score: 61.0
            variance_vs_baseline: 2.4
    ReportExportRequest:
      type: object
      required: [framework]
      properties:
        framework: { type: string, enum: [GRI, SASB, CSRD] }
        scope: { type: string, enum: [company, portfolio], default: company }
        id: { type: string, description: Company or portfolio identifier }
        include_history_years: { type: integer, default: 3 }
        delta_only: { type: boolean, default: false }
    ReportExport:
      type: object
      properties:
        export_id: { type: string }
        framework: { type: string }
        status: { type: string, enum: [queued, processing, complete, failed] }
        generated_at: { type: string, format: date-time, nullable: true }
        download_url: { type: string, nullable: true }
      example:
        export_id: exp_2025_q3_gri
        framework: GRI
        status: complete
        generated_at: 2025-09-13T10:30:00Z
        download_url: https://exports.envoyou.com/bundles/exp_2025_q3_gri.zip
    TaxonomyDiff:
      type: object
      properties:
        from: { type: string }
        to: { type: string }
        added:
          type: array
          items: { $ref: '#/components/schemas/MappingChange' }
        removed:
          type: array
          items: { $ref: '#/components/schemas/MappingChange' }
        changed:
          type: array
          items: { $ref: '#/components/schemas/MappingDelta' }
      example:
        from: 2025.1
        to: 2025.2
        added:
          - key: waste_generated_tons
            code: GRI:306-3
        removed: []
        changed:
          - key: scope2_emissions_tco2e
            from: GRI:305-2a
            to: GRI:305-2
    MappingChange:
      type: object
      properties:
        key: { type: string }
        code: { type: string }
    MappingDelta:
      type: object
      properties:
        key: { type: string }
        from: { type: string }
        to: { type: string }
    ErrorResponse:
      type: object
      properties:
        error: { type: string, example: invalid_request }
        message: { type: string, example: Invalid metric parameter }
        request_id: { type: string, example: req_12345 }
        status: { type: integer, example: 400 }
      required: [error, message]
      example:
        error: invalid_request
        message: Invalid metric parameter
        request_id: req_8f3a92
        status: 400
    ValidationError:
      type: object
      properties:
        error: { type: string, example: validation_error }
        message: { type: string, example: One or more fields failed validation }
        status: { type: integer, example: 400 }
        fields:
          type: array
          items:
            type: object
            properties:
              field: { type: string, example: "company_ids[2]" }
              issue: { type: string, example: must be a valid UUID }
      required: [error, message]
      example:
        error: validation_error
        message: One or more fields failed validation
        status: 400
        fields:
          - field: "company_ids[2]"
            issue: must be a valid UUID
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    ValidationErrorResponse:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ValidationError' }
    TooManyRequestsError:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-RateLimit-Retry-After:
          description: Seconds until requests are accepted again.
          schema: { type: integer, example: 42 }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    ListMeasurements:
      description: List of measurement objects
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
        X-Pagination-Limit: { $ref: '#/components/headers/PaginationLimit' }
        X-Pagination-Next: { $ref: '#/components/headers/PaginationNext' }
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Measurement'
    ListStations:
      description: Station list
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
        X-Pagination-Limit: { $ref: '#/components/headers/PaginationLimit' }
        X-Pagination-Next: { $ref: '#/components/headers/PaginationNext' }
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Station'
    ListAlertRules:
      description: Alert rules
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
      content:
        application/json:
          schema:
            type: array
            items: { $ref: '#/components/schemas/AlertRule' }
    AcceptedExport:
      description: Accepted for processing
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
      content:
        application/json:
          schema:
            type: object
            properties:
              export_id: { type: string }
              status: { type: string, example: queued }
