openapi: 3.0.3
info:
  title: Envoyou Core API
  version: 1.0.0
  description: >-
    Complete Envoyou API for environmental data verification and compliance checking.
    Includes authentication, user management, global environmental data, permits,
    notifications, and administrative functions.
servers:
  - url: https://api.envoyou.com/v1
    description: Production
  - url: https://api-staging.envoyou.com/v1
    description: Staging
  - url: http://localhost:10000/v1
    description: Local Development
security:
  - BearerAuth: []
  - ApiKeyAuth: []
paths:
  # Notifications (clean prefixes)
  /notifications/:
    get:
      summary: Get user notifications
      tags: [Notifications]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
        - in: query
          name: limit
          required: false
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          required: false
          schema: { type: integer, default: 0 }
        - in: query
          name: unread_only
          required: false
          schema: { type: boolean, default: false }
        - in: query
          name: category
          required: false
          schema: { type: string, enum: [account, security, billing, system, marketing, support] }
      responses:
        '200': { description: Successful Response }
    post:
      summary: Create notification
      tags: [Notifications]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, title, message]
              properties:
                user_id: { type: string }
                title: { type: string }
                message: { type: string }
                type: { type: string, enum: [email, in_app, push, sms], default: in_app }
                category: { type: string, enum: [account, security, billing, system, marketing, support], default: system }
                priority: { type: string, enum: [low, medium, high, urgent], default: medium }
      responses:
        '200': { description: Successful Response }

  /notifications/count:
    get:
      summary: Get notification count
      tags: [Notifications]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
        - in: query
          name: unread_only
          required: false
          schema: { type: boolean, default: false }
      responses:
        '200': { description: Successful Response }

  /notifications/{notification_id}/read:
    put:
      summary: Mark notification as read
      tags: [Notifications]
      parameters:
        - in: path
          name: notification_id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Successful Response }

  /notifications/read-all:
    put:
      summary: Mark all notifications as read
      tags: [Notifications]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Successful Response }

  /notifications/{notification_id}:
    delete:
      summary: Delete notification
      tags: [Notifications]
      parameters:
        - in: path
          name: notification_id
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Successful Response }

  /notifications/templates:
    get:
      summary: Get notification templates
      tags: [Notifications]
      responses:
        '200': { description: Successful Response }

  /notifications/send-template:
    post:
      summary: Send template notification
      tags: [Notifications]
      parameters:
        - in: query
          name: template_key
          required: true
          schema: { type: string }
        - in: query
          name: user_id
          required: true
          schema: { type: string }
      requestBody:
        required: false
        content:
          application/json:
            schema: { type: object, additionalProperties: true }
      responses:
        '200': { description: Successful Response }

  /notifications/preferences/{user_id}:
    get:
      summary: Get user notification preferences
      tags: [Notifications]
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Successful Response }
    put:
      summary: Update user notification preferences
      tags: [Notifications]
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, additionalProperties: { type: boolean } }
      responses:
        '200': { description: Successful Response }
    delete:
      summary: Delete user notification preferences
      tags: [Notifications]
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Successful Response }

  /notifications/events/welcome:
    post:
      summary: Send welcome notification event
      tags: [Notifications]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Successful Response }

  /notifications/events/verification:
    post:
      summary: Send verification notification event
      tags: [Notifications]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
        - in: query
          name: verification_code
          required: true
          schema: { type: string }
      responses:
        '200': { description: Successful Response }

  /notifications/events/password-reset:
    post:
      summary: Send password reset notification event
      tags: [Notifications]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
        - in: query
          name: reset_token
          required: true
          schema: { type: string }
      responses:
        '200': { description: Successful Response }

  /notifications/events/security-alert:
    post:
      summary: Send security alert notification event
      tags: [Notifications]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
        - in: query
          name: alert_type
          required: true
          schema: { type: string }
        - in: query
          name: details
          required: false
          schema: { type: string }
      responses:
        '200': { description: Successful Response }

  /notifications/events/billing:
    post:
      summary: Send billing notification event
      tags: [Notifications]
      parameters:
        - in: query
          name: user_id
          required: true
          schema: { type: string }
        - in: query
          name: billing_type
          required: true
          schema: { type: string }
        - in: query
          name: amount
          required: false
          schema: { type: number }
      responses:
        '200': { description: Successful Response }

  /notifications/cleanup:
    post:
      summary: Cleanup expired notifications
      tags: [Notifications]
      responses:
        '200': { description: Successful Response }

  # Payments (clean prefixes)
  /payments/create-subscription:
    post:
      summary: Create subscription
      tags: [Payments]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [price_id]
              properties:
                price_id: { type: string }
                custom_data: { type: object, additionalProperties: true }
      responses:
        '200': { description: Successful Response }

  /payments/subscription/{subscription_id}:
    get:
      summary: Get subscription
      tags: [Payments]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: subscription_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Successful Response }

  /payments/webhook:
    post:
      summary: Paddle webhook
      tags: [Payments]
      responses:
        '200': { description: Successful Response }

  # Cloudflare
  /cloudflare/health:
    get:
      summary: Cloudflare API health check
      tags: [Cloudflare]
      responses:
        '200': { description: Successful Response }

  /cloudflare/analytics:
    get:
      summary: Zone analytics
      tags: [Cloudflare]
      parameters:
        - in: query
          name: domain
          required: false
          schema: { type: string, default: envoyou.com }
        - in: query
          name: hours
          required: false
          schema: { type: integer, default: 24 }
      responses:
        '200': { description: Successful Response }

  /cloudflare/dns:
    get:
      summary: DNS records
      tags: [Cloudflare]
      parameters:
        - in: query
          name: domain
          required: false
          schema: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }
    post:
      summary: Create DNS record
      tags: [Cloudflare]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domain: { type: string, default: envoyou.com }
                record_type: { type: string, default: A }
                name: { type: string }
                content: { type: string }
                ttl: { type: integer, default: 1 }
                proxied: { type: boolean, default: true }
      responses:
        '200': { description: Successful Response }

  /cloudflare/dns/{record_id}:
    put:
      summary: Update DNS record
      tags: [Cloudflare]
      parameters:
        - in: path
          name: record_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                domain: { type: string, default: envoyou.com }
                record_type: { type: string, default: A }
                name: { type: string }
                content: { type: string }
                ttl: { type: integer, default: 1 }
                proxied: { type: boolean, default: true }
      responses:
        '200': { description: Successful Response }
    delete:
      summary: Delete DNS record
      tags: [Cloudflare]
      parameters:
        - in: path
          name: record_id
          required: true
          schema: { type: string }
        - in: query
          name: domain
          required: false
          schema: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }

  /cloudflare/firewall:
    get:
      summary: Firewall rules
      tags: [Cloudflare]
      parameters:
        - in: query
          name: domain
          required: false
          schema: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }
    post:
      summary: Create firewall rule
      tags: [Cloudflare]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description: { type: string }
                expression: { type: string }
                action: { type: string, default: block }
                domain: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }

  /cloudflare/rate-limits:
    get:
      summary: Rate limiting rules
      tags: [Cloudflare]
      parameters:
        - in: query
          name: domain
          required: false
          schema: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }
    post:
      summary: Create rate limit
      tags: [Cloudflare]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url_pattern: { type: string }
                requests_per_period: { type: integer, default: 100 }
                period: { type: integer, default: 60 }
                action: { type: string, default: block }
                domain: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }

  /cloudflare/cache/purge:
    post:
      summary: Purge cache
      tags: [Cloudflare]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                urls:
                  type: array
                  items: { type: string }
                domain: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }

  /cloudflare/ssl:
    get:
      summary: SSL/TLS status
      tags: [Cloudflare]
      parameters:
        - in: query
          name: domain
          required: false
          schema: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }

  /cloudflare/page-rules:
    get:
      summary: Page rules
      tags: [Cloudflare]
      parameters:
        - in: query
          name: domain
          required: false
          schema: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }
    post:
      summary: Create page rule
      tags: [Cloudflare]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                url_pattern: { type: string }
                actions: { type: array, items: { type: object } }
                priority: { type: integer, default: 1 }
                domain: { type: string, default: envoyou.com }
      responses:
        '200': { description: Successful Response }

  # Environmental
  /environmental/us/facilities/{facility_name}:
    get:
      summary: Search US facilities (EPA→EIA fallback)
      tags: [Environmental Data]
      parameters:
        - in: path
          name: facility_name
          required: true
          schema: { type: string }
        - in: query
          name: source
          required: false
          schema: { type: string, enum: [epa, eia] }
      responses:
        '200': { description: Successful Response }
  # Authentication Endpoints
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  token_type: { type: string, example: bearer }
                  user: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }

  /auth/register:
    post:
      summary: User registration
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, name]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
                name: { type: string }
                company: { type: string }
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  user: { $ref: '#/components/schemas/User' }
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }

  /auth/verify-email:
    get:
      summary: Verify email address
      tags: [Authentication]
      parameters:
        - in: query
          name: token
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Email verified successfully
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
    post:
      summary: Send email verification
      tags: [Authentication]
      responses:
        '200':
          description: Verification email sent

  /auth/forgot-password:
    post:
      summary: Request password reset
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        '200':
          description: Password reset email sent

  /auth/reset-password:
    post:
      summary: Reset password with token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, password]
              properties:
                token: { type: string }
                password: { type: string, minLength: 8 }
      responses:
        '200':
          description: Password reset successful
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }

  /auth/refresh:
    post:
      summary: Refresh access token
      tags: [Authentication]
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  token_type: { type: string, example: bearer }

  /auth/logout:
    post:
      summary: User logout
      tags: [Authentication]
      responses:
        '200':
          description: Logout successful

  /auth/change-password:
    post:
      summary: Change user password
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [current_password, new_password]
              properties:
                current_password: { type: string }
                new_password: { type: string, minLength: 8 }
      responses:
        '200':
          description: Password changed successfully
        '401': { $ref: '#/components/responses/UnauthorizedError' }

  /auth/send-verification:
    post:
      summary: Send email verification
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Verification email sent

  /auth/set-password:
    post:
      summary: Set password for OAuth users
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password: { type: string, minLength: 8 }
      responses:
        '200':
          description: Password set successfully

  /auth/set-local-password:
    post:
      summary: Set local password
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password: { type: string, minLength: 8 }
      responses:
        '200':
          description: Password set successfully

  /auth/request-free-api-key:
    post:
      summary: Request free API key
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, name]
              properties:
                email: { type: string, format: email }
                name: { type: string }
                company: { type: string }
      responses:
        '200':
          description: API key sent to email

  # OAuth Authentication
  /auth/google/login:
    get:
      summary: Google OAuth login URL
      tags: [Authentication]
      responses:
        '200':
          description: Google OAuth URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string }

  /auth/google/callback:
    post:
      summary: Google OAuth callback
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code: { type: string }
      responses:
        '200':
          description: OAuth successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  user: { $ref: '#/components/schemas/User' }

  /auth/google/token:
    post:
      summary: Exchange Google OAuth code for token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code: { type: string }
      responses:
        '200':
          description: Token issued

  /auth/github/login:
    get:
      summary: GitHub OAuth login URL
      tags: [Authentication]
      responses:
        '200':
          description: GitHub OAuth URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url: { type: string }

  /auth/github/callback:
    post:
      summary: GitHub OAuth callback
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code: { type: string }
      responses:
        '200':
          description: OAuth successful

  /auth/github/token:
    post:
      summary: Exchange GitHub OAuth code for token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code: { type: string }
      responses:
        '200':
          description: Token issued

  # Two-Factor Authentication
  /auth/2fa/setup:
    post:
      summary: Setup 2FA
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: 2FA setup data
          content:
            application/json:
              schema:
                type: object
                properties:
                  secret: { type: string }
                  qr_code: { type: string }

  /auth/2fa/verify:
    post:
      summary: Verify 2FA code
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code]
              properties:
                code: { type: string }
      responses:
        '200':
          description: 2FA verified

  /auth/2fa/disable:
    post:
      summary: Disable 2FA
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: 2FA disabled

  # Supabase Authentication
  /auth/supabase/me:
    get:
      summary: Get current Supabase user
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: User data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /auth/supabase/verify:
    post:
      summary: Verify Supabase token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token]
              properties:
                token: { type: string }
      responses:
        '200':
          description: Token verified

  # Session Management
  /auth/sessions/redis/{session_id}:
    get:
      summary: Get Redis session
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: session_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Session data
    delete:
      summary: Delete Redis session
      tags: [Authentication]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: session_id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Session deleted

  # Alerts
  /alerts:
    get:
      summary: List alert rules
      tags: [Alerts]
      responses:
        '200':
          $ref: '#/components/responses/ListAlertRules'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '429': { $ref: '#/components/responses/TooManyRequestsError' }
    post:
      summary: Create alert rule
      tags: [Alerts]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AlertRuleCreate' }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AlertRule' }
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /alerts/{id}:
    delete:
      summary: Delete alert rule
      tags: [Alerts]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }

  # User Management Endpoints
  /user/profile:
    get:
      summary: Get user profile
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
    put:
      summary: Update user profile
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                company: { type: string }
                job_title: { type: string }
                timezone: { type: string }
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }

  /user/stats:
    get:
      summary: Get user statistics
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: User statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_calls: { type: integer }
                  last_login: { type: string, format: date-time }

  /user/avatar:
    post:
      summary: Upload user avatar
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar_url: { type: string }

  /user/plan:
    get:
      summary: Get user subscription plan
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: User plan
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan: { type: string, enum: [FREE, PREMIUM, ENTERPRISE] }

  /user/api-keys:
    get:
      summary: List user API keys
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: API keys list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/APIKey' }
    post:
      summary: Create API key
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                permissions: { type: array, items: { type: string } }
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/APIKey' }

  /user/api-keys/{key_id}:
    delete:
      summary: Delete API key
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: key_id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: API key deleted

  /user/sessions:
    get:
      summary: List user sessions
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Sessions list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Session' }

  /user/sessions/{session_id}:
    delete:
      summary: Delete user session
      tags: [User Management]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: session_id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Session deleted

  # Global Data Endpoints
  /global/emissions:
    get:
      summary: Get global emissions data
      tags: [Global Data]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: query
          name: country
          schema: { type: string }
        - in: query
          name: year
          schema: { type: integer }
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
      responses:
        '200':
          description: Emissions data
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/EmissionData' }

  /global/emissions/stats:
    get:
      summary: Get emissions statistics
      tags: [Global Data]
      security: [{ ApiKeyAuth: [] }]
      responses:
        '200':
          description: Emissions statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_countries: { type: integer }
                  total_emissions: { type: number }
                  avg_emissions: { type: number }

  /global/campd:
    get:
      summary: Get CAMPD power plant data
      tags: [Global Data]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: query
          name: state
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
      responses:
        '200':
          description: Power plant data
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/PowerPlant' }

  /global/eea:
    get:
      summary: Get EEA environmental indicators
      tags: [Global Data]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: query
          name: indicator
          schema: { type: string }
        - in: query
          name: country
          schema: { type: string }
      responses:
        '200':
          description: EEA indicators
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/EEAIndicator' }

  /global/edgar:
    get:
      summary: Get EDGAR emissions data
      tags: [Global Data]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: query
          name: sector
          schema: { type: string }
        - in: query
          name: country
          schema: { type: string }
      responses:
        '200':
          description: EDGAR emissions data
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/EDGAREmission' }

  /global/iso:
    get:
      summary: Get ISO 14001 certifications
      tags: [Global Data]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: query
          name: country
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
      responses:
        '200':
          description: ISO certifications
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/ISOCertification' }

  /global/cevs/{company_name}:
    get:
      summary: Get CEVS score for company
      tags: [Global Data]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: path
          name: company_name
          required: true
          schema: { type: string }
      responses:
        '200':
          description: CEVS score
          content:
            application/json:
              schema:
                type: object
                properties:
                  company: { type: string }
                  cevs_score: { type: number }
                  last_updated: { type: string, format: date-time }

  # Permits Endpoints
  /permits/{permit_id}:
    get:
      summary: Get permit by ID
      tags: [Permits]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: path
          name: permit_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Permit data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Permit' }

  /permits/active:
    get:
      summary: Get active permits
      tags: [Permits]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
      responses:
        '200':
          description: Active permits
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permit' }

  /permits/search:
    get:
      summary: Search permits
      tags: [Permits]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: query
          name: query
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permit' }

  /permits/stats:
    get:
      summary: Get permits statistics
      tags: [Permits]
      security: [{ ApiKeyAuth: [] }]
      responses:
        '200':
          description: Permits statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_permits: { type: integer }
                  active_permits: { type: integer }
                  expired_permits: { type: integer }

  /permits/type/{permit_type}:
    get:
      summary: Get permits by type
      tags: [Permits]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: path
          name: permit_type
          required: true
          schema: { type: string }
        - in: query
          name: limit
          schema: { type: integer, default: 100 }
      responses:
        '200':
          description: Permits by type
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permit' }

  /permits/company/{company_name}:
    get:
      summary: Get permits by company
      tags: [Permits]
      security: [{ ApiKeyAuth: [] }]
      parameters:
        - in: path
          name: company_name
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Company permits
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Permit' }

  # Notifications Endpoints
  /notifications/:
    get:
      summary: List user notifications
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
        - in: query
          name: offset
          schema: { type: integer, default: 0 }
      responses:
        '200':
          description: Notifications list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Notification' }
    post:
      summary: Create notification
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, message]
              properties:
                title: { type: string }
                message: { type: string }
                type: { type: string, enum: [info, warning, error, success] }
      responses:
        '201':
          description: Notification created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Notification' }

  /notifications/{notification_id}:
    delete:
      summary: Delete notification
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: notification_id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Notification deleted

  /notifications/{notification_id}/read:
    put:
      summary: Mark notification as read
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: notification_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Notification marked as read

  /notifications/read-all:
    put:
      summary: Mark all notifications as read
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: All notifications marked as read

  /notifications/count:
    get:
      summary: Get unread notifications count
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Unread count
          content:
            application/json:
              schema:
                type: object
                properties:
                  unread_count: { type: integer }

  /notifications/preferences/{user_id}:
    get:
      summary: Get notification preferences
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Notification preferences
          content:
            application/json:
              schema: { $ref: '#/components/schemas/NotificationPreferences' }
    put:
      summary: Update notification preferences
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/NotificationPreferences' }
      responses:
        '200':
          description: Preferences updated
    delete:
      summary: Reset notification preferences
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: user_id
          required: true
          schema: { type: string }
      responses:
        '204':
          description: Preferences reset

  /notifications/templates:
    get:
      summary: Get notification templates
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Notification templates
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/NotificationTemplate' }

  /notifications/send-template:
    post:
      summary: Send notification using template
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [template_id, recipient_id]
              properties:
                template_id: { type: string }
                recipient_id: { type: string }
                variables: { type: object }
      responses:
        '200':
          description: Notification sent

  /notifications/cleanup:
    post:
      summary: Cleanup old notifications
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Cleanup completed

  # Notification Events
  /notifications/events/welcome:
    post:
      summary: Send welcome notification
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id: { type: string }
      responses:
        '200':
          description: Welcome notification sent

  /notifications/events/verification:
    post:
      summary: Send email verification notification
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id: { type: string }
      responses:
        '200':
          description: Verification notification sent

  /notifications/events/password-reset:
    post:
      summary: Send password reset notification
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id]
              properties:
                user_id: { type: string }
      responses:
        '200':
          description: Password reset notification sent

  /notifications/events/security-alert:
    post:
      summary: Send security alert notification
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, alert_type]
              properties:
                user_id: { type: string }
                alert_type: { type: string }
                details: { type: object }
      responses:
        '200':
          description: Security alert sent

  /notifications/events/billing:
    post:
      summary: Send billing notification
      tags: [Notifications]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, billing_type]
              properties:
                user_id: { type: string }
                billing_type: { type: string, enum: [invoice, payment_failed, subscription_cancelled] }
                amount: { type: number }
      responses:
        '200':
          description: Billing notification sent

  # Health Check Endpoints
  /health/ready:
    get:
      summary: Readiness check
      tags: [Health]
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: ready }
                  timestamp: { type: string, format: date-time }

  # Admin Endpoints
  /admin/request-demo-key:
    post:
      summary: Request demo API key
      tags: [Admin]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tier]
              properties:
                tier: { type: string, enum: [basic, premium, enterprise] }
                email: { type: string, format: email }
      responses:
        '200':
          description: Demo key created
          content:
            application/json:
              schema:
                type: object
                properties:
                  api_key: { type: string }
                  tier: { type: string }
                  expires_at: { type: string, format: date-time }

  /admin/api-keys:
    get:
      summary: List all API keys
      tags: [Admin]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: API keys list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/APIKey' }
    post:
      summary: Create API key
      tags: [Admin]
      security: [{ BearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, tier]
              properties:
                name: { type: string }
                tier: { type: string, enum: [basic, premium, enterprise] }
                permissions: { type: array, items: { type: string } }
      responses:
        '201':
          description: API key created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/APIKey' }

  /admin/api-keys/{key_prefix}:
    delete:
      summary: Delete API key by prefix
      tags: [Admin]
      security: [{ BearerAuth: [] }]
      parameters:
        - in: path
          name: key_prefix
          required: true
          schema: { type: string }
      responses:
        '204':
          description: API key deleted

  /admin/stats:
    get:
      summary: Get admin statistics
      tags: [Admin]
      security: [{ BearerAuth: [] }]
      responses:
        '200':
          description: Admin statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users: { type: integer }
                  total_api_keys: { type: integer }
                  active_sessions: { type: integer }
                  api_calls_today: { type: integer }

  # External Services
  /external/:
    get:
      summary: External service status
      tags: [External]
      responses:
        '200':
          description: External services status
          content:
            application/json:
              schema:
                type: object
                properties:
                  services: { type: object }
  /scenarios/run:
    post:
      summary: Run scenario analysis over a portfolio or company set
      tags: [Scenarios]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScenarioRunRequest'
      responses:
        '200':
          description: Scenario result set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioRunResult'
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /exports/report:
    post:
      summary: Generate sustainability report export bundle
      tags: [Reports]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportExportRequest'
      responses:
        '202':
          $ref: '#/components/responses/AcceptedExport'
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '401': { $ref: '#/components/responses/UnauthorizedError' }
  /exports/report/{id}:
    get:
      summary: Get export status / download link
      tags: [Reports]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Export status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportExport'
        '401': { $ref: '#/components/responses/UnauthorizedError' }
        '404': { $ref: '#/components/responses/NotFoundError' }
  /taxonomy/mappings/diff:
    get:
      summary: Diff two taxonomy mapping versions
      tags: [Taxonomy]
      parameters:
        - in: query
          name: from
          required: true
          schema: { type: string }
        - in: query
          name: to
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Mapping diff
          headers:
            X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
            X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
            X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
            X-Request-ID: { $ref: '#/components/headers/RequestID' }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyDiff'
        '400': { $ref: '#/components/responses/ValidationErrorResponse' }
        '404': { $ref: '#/components/responses/NotFoundError' }
        '429': { $ref: '#/components/responses/TooManyRequestsError' }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  headers:
    RateLimitLimit:
      description: The quota ceiling for the current window.
      schema: { type: integer, example: 1200 }
    RateLimitRemaining:
      description: Requests remaining in the current window.
      schema: { type: integer, example: 1187 }
    RateLimitReset:
      description: Unix epoch seconds when the current window resets.
      schema: { type: integer, example: 1731532800 }
    RequestID:
      description: Unique ID for tracing this request.
      schema: { type: string, example: req_8f3a92 }
    PaginationLimit:
      description: Effective per-page item limit applied.
      schema: { type: integer, example: 50 }
    PaginationNext:
      description: Cursor token for the next page (omit if no further pages).
      schema: { type: string, example: eyJvZmZzZXQiOjE1MH0 }
  schemas:
    Measurement:
      type: object
      properties:
        station_id: { type: string }
        pollutant: { type: string, example: pm25 }
        value: { type: number }
        unit: { type: string, example: "µg/m³" }
        captured_at: { type: string, format: date-time }
        quality_index: { type: integer }
    Station:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        country: { type: string }
        city: { type: string }
        latitude: { type: number }
        longitude: { type: number }
        elevation_m: { type: number }
    BenchmarkDistribution:
      type: object
      properties:
        metric: { type: string }
        window: { type: string }
        percentiles:
          type: object
          additionalProperties: { type: number }
        mean: { type: number }
        median: { type: number }
      example:
        metric: cevs_score
        window: 30d
        percentiles:
          p10: 42.1
          p25: 55.3
          p50: 61.8
          p75: 68.4
          p90: 74.9
        mean: 62.7
        median: 61.8
    PeerBenchmark:
      type: object
      properties:
        metric: { type: string }
        window: { type: string }
        companies:
          type: array
          items:
            type: object
            properties:
              id: { type: string }
              score: { type: number }
              percentile: { type: number }
        aggregate:
          type: object
          properties:
            mean: { type: number }
            median: { type: number }
            stddev: { type: number }
      example:
        metric: water_discharge_ppm
        window: 90d
        companies:
          - id: comp_A
            score: 87.2
            percentile: 82
          - id: comp_B
            score: 76.5
            percentile: 61
          - id: comp_C
            score: 69.1
            percentile: 48
        aggregate:
          mean: 77.6
          median: 76.5
          stddev: 7.4
    APIKey:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        key_prefix: { type: string }
        tier: { type: string, enum: [basic, premium, enterprise] }
        permissions: { type: array, items: { type: string } }
        created_at: { type: string, format: date-time }
        last_used_at: { type: string, format: date-time, nullable: true }
        expires_at: { type: string, format: date-time, nullable: true }
      example:
        id: key_12345
        name: Production API Key
        key_prefix: evo_prod_
        tier: premium
        permissions: ["read:emissions", "read:permits"]
        created_at: 2025-09-13T10:20:11Z
        last_used_at: 2025-09-13T14:30:22Z
        expires_at: null
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        name: { type: string }
        tier: { type: string, enum: [basic, premium, enterprise] }
        created_at: { type: string, format: date-time }
        last_login_at: { type: string, format: date-time, nullable: true }
        is_active: { type: boolean }
        two_factor_enabled: { type: boolean }
      example:
        id: user_12345
        email: user@example.com
        name: John Doe
        tier: premium
        created_at: 2025-09-13T10:20:11Z
        last_login_at: 2025-09-13T14:30:22Z
        is_active: true
        two_factor_enabled: false
    Session:
      type: object
      properties:
        id: { type: string }
        user_id: { type: string }
        created_at: { type: string, format: date-time }
        last_activity_at: { type: string, format: date-time }
        ip_address: { type: string }
        user_agent: { type: string }
        is_active: { type: boolean }
      example:
        id: sess_abc123
        user_id: user_12345
        created_at: 2025-09-13T10:20:11Z
        last_activity_at: 2025-09-13T14:30:22Z
        ip_address: 192.168.1.100
        user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
        is_active: true
    Notification:
      type: object
      properties:
        id: { type: string }
        type: { type: string, enum: [billing, alert, system, marketing] }
        title: { type: string }
        message: { type: string }
        read: { type: boolean, default: false }
        created_at: { type: string, format: date-time }
        data: { type: object }
      example:
        id: notif_12345
        type: billing
        title: Payment Due
        message: Your monthly subscription payment is due
        read: false
        created_at: 2025-09-13T10:20:11Z
        data: { amount: 99.99, due_date: "2025-10-01" }
    NotificationPreferences:
      type: object
      properties:
        email_enabled: { type: boolean, default: true }
        push_enabled: { type: boolean, default: true }
        sms_enabled: { type: boolean, default: false }
        billing_notifications: { type: boolean, default: true }
        alert_notifications: { type: boolean, default: true }
        system_notifications: { type: boolean, default: true }
        marketing_notifications: { type: boolean, default: false }
        quiet_hours_start: { type: string, format: time, nullable: true }
        quiet_hours_end: { type: string, format: time, nullable: true }
        timezone: { type: string, default: "UTC" }
      example:
        email_enabled: true
        push_enabled: true
        sms_enabled: false
        billing_notifications: true
        alert_notifications: true
        system_notifications: true
        marketing_notifications: false
        quiet_hours_start: "22:00"
        quiet_hours_end: "08:00"
        timezone: "America/New_York"
    NotificationTemplate:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        type: { type: string, enum: [email, push, sms] }
        subject: { type: string }
        body: { type: string }
        variables: { type: array, items: { type: string } }
        language: { type: string, default: "en" }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
      example:
        id: template_12345
        name: Payment Reminder
        type: email
        subject: "Payment Due: {{amount}}"
        body: "Dear {{name}}, your payment of {{amount}} is due on {{due_date}}."
        variables: [name, amount, due_date]
        language: en
        created_at: 2025-09-13T10:20:11Z
        updated_at: 2025-09-13T10:20:11Z
    Permit:
      type: object
      properties:
        id: { type: string }
        company_name: { type: string }
        permit_number: { type: string }
        facility_name: { type: string }
        address: { type: string }
        latitude: { type: number }
        longitude: { type: number }
        permit_type: { type: string }
        status: { type: string, enum: [active, expired, revoked] }
        issued_date: { type: string, format: date }
        expiration_date: { type: string, format: date, nullable: true }
        source: { type: string }
      example:
        id: permit_12345
        company_name: ABC Manufacturing
        permit_number: EPA-2025-001
        facility_name: Main Plant
        address: 123 Industrial Blvd, Springfield, IL
        latitude: 39.7817
        longitude: -89.6501
        permit_type: Air Quality
        status: active
        issued_date: "2025-01-01"
        expiration_date: "2030-01-01"
        source: EPA
    GlobalData:
      type: object
      properties:
        id: { type: string }
        dataset: { type: string, enum: [emissions, campd, eea, edgar, iso, cevs] }
        country: { type: string }
        year: { type: integer }
        data: { type: object }
        source: { type: string }
        last_updated: { type: string, format: date-time }
      example:
        id: data_12345
        dataset: emissions
        country: US
        year: 2023
        data: { co2_total: 5000000, methane: 120000 }
        source: EDGAR
        last_updated: 2025-09-13T10:20:11Z
    EmissionData:
      type: object
      properties:
        country: { type: string }
        country_code: { type: string }
        year: { type: integer }
        pollutant: { type: string, enum: [co2, ch4, n2o, so2, nox, pm25, pm10] }
        value: { type: number }
        unit: { type: string, example: "kt" }
        sector: { type: string }
        source: { type: string, enum: [edgar, epa, eea] }
        last_updated: { type: string, format: date-time }
      example:
        country: United States
        country_code: US
        year: 2023
        pollutant: co2
        value: 5000000
        unit: kt
        sector: energy
        source: edgar
        last_updated: 2025-09-13T10:20:11Z
    PowerPlant:
      type: object
      properties:
        plant_id: { type: string }
        plant_name: { type: string }
        owner: { type: string }
        operator: { type: string }
        state: { type: string }
        county: { type: string }
        latitude: { type: number }
        longitude: { type: number }
        primary_fuel: { type: string, enum: [coal, gas, nuclear, hydro, wind, solar, biomass] }
        capacity_mw: { type: number }
        generation_mwh: { type: number }
        emissions_co2: { type: number }
        emissions_so2: { type: number }
        emissions_nox: { type: number }
        year: { type: integer }
        source: { type: string, example: EPA CAMPD }
      example:
        plant_id: 12345
        plant_name: Springfield Power Plant
        owner: Utility Corp
        operator: Utility Corp
        state: IL
        county: Sangamon
        latitude: 39.7817
        longitude: -89.6501
        primary_fuel: coal
        capacity_mw: 1200
        generation_mwh: 8500000
        emissions_co2: 8500000
        emissions_so2: 12000
        emissions_nox: 8000
        year: 2023
        source: EPA CAMPD
    EEAIndicator:
      type: object
      properties:
        indicator_code: { type: string }
        indicator_name: { type: string }
        country: { type: string }
        country_code: { type: string }
        year: { type: integer }
        value: { type: number }
        unit: { type: string }
        category: { type: string, enum: [air, water, waste, biodiversity, climate] }
        last_updated: { type: string, format: date-time }
      example:
        indicator_code: GHG_1001
        indicator_name: Greenhouse Gas Emissions
        country: Germany
        country_code: DE
        year: 2023
        value: 750000
        unit: kt CO2-eq
        category: climate
        last_updated: 2025-09-13T10:20:11Z
    EDGAREmission:
      type: object
      properties:
        country: { type: string }
        country_code: { type: string }
        sector: { type: string }
        subsector: { type: string }
        pollutant: { type: string, enum: [co2, ch4, n2o, so2, nox, pm25, pm10] }
        year: { type: integer }
        value: { type: number }
        unit: { type: string, example: "kt" }
        uncertainty: { type: number }
        last_updated: { type: string, format: date-time }
      example:
        country: United States
        country_code: US
        sector: energy
        subsector: electricity
        pollutant: co2
        year: 2023
        value: 1200000
        unit: kt
        uncertainty: 0.05
        last_updated: 2025-09-13T10:20:11Z
    ISOCertification:
      type: object
      properties:
        organization_name: { type: string }
        registration_number: { type: string }
        standard: { type: string, example: "ISO 14001:2015" }
        certification_body: { type: string }
        country: { type: string }
        issue_date: { type: string, format: date }
        expiry_date: { type: string, format: date }
        status: { type: string, enum: [active, expired, suspended] }
        scope: { type: string }
        last_updated: { type: string, format: date-time }
      example:
        organization_name: ABC Manufacturing Ltd
        registration_number: ISO14001-2023-001
        standard: ISO 14001:2015
        certification_body: BSI
        country: United Kingdom
        issue_date: "2023-01-15"
        expiry_date: "2026-01-14"
        status: active
        scope: Manufacturing of industrial equipment
        last_updated: 2025-09-13T10:20:11Z
    AlertRuleBase:
      type: object
      properties:
        name: { type: string }
        metric: { type: string }
        operator: { type: string, example: ">" }
        threshold: { type: number }
        window: { type: string, example: "1h" }
        notify: { type: array, items: { type: string } }
        enabled: { type: boolean, default: true }
    AlertRuleCreate:
      allOf:
        - $ref: '#/components/schemas/AlertRuleBase'
    AlertRule:
      allOf:
        - $ref: '#/components/schemas/AlertRuleBase'
        - type: object
          properties:
            id: { type: string }
            created_at: { type: string, format: date-time }
            last_triggered_at: { type: string, format: date-time, nullable: true }
      example:
        id: ar_12345
        name: CEVS Score Drop
        metric: cevs_score
        operator: drop_percent
        threshold: 5
        window: 24h
        notify: ["slack:#esg-risk"]
        enabled: true
        created_at: 2025-09-13T10:20:11Z
        last_triggered_at: null
    ScenarioRunRequest:
      type: object
      required: [targets, shocks]
      properties:
        targets:
          type: array
          items: { type: string }
        shocks:
          type: object
          properties:
            carbon_price: { type: number, example: 120 }
            regulation_delay_years: { type: number, example: 2 }
            intensity_decline_rate: { type: number, example: 0.04 }
        window: { type: string, example: '2030' }
    ScenarioRunResult:
      type: object
      properties:
        run_id: { type: string }
        targets: { type: array, items: { type: string } }
        assumptions: { type: object }
        results:
          type: array
          items:
            type: object
            properties:
              target: { type: string }
              projected_score: { type: number }
              variance_vs_baseline: { type: number }
      example:
        run_id: scen_f83ab2
        targets: [comp_A, comp_B, comp_C]
        assumptions:
          carbon_price: 120
          regulation_delay_years: 2
          intensity_decline_rate: 0.04
        results:
          - target: comp_A
            projected_score: 72.4
            variance_vs_baseline: 3.1
          - target: comp_B
            projected_score: 65.2
            variance_vs_baseline: 1.8
          - target: comp_C
            projected_score: 61.0
            variance_vs_baseline: 2.4
    ReportExportRequest:
      type: object
      required: [framework]
      properties:
        framework: { type: string, enum: [GRI, SASB, CSRD] }
        scope: { type: string, enum: [company, portfolio], default: company }
        id: { type: string, description: Company or portfolio identifier }
        include_history_years: { type: integer, default: 3 }
        delta_only: { type: boolean, default: false }
    ReportExport:
      type: object
      properties:
        export_id: { type: string }
        framework: { type: string }
        status: { type: string, enum: [queued, processing, complete, failed] }
        generated_at: { type: string, format: date-time, nullable: true }
        download_url: { type: string, nullable: true }
      example:
        export_id: exp_2025_q3_gri
        framework: GRI
        status: complete
        generated_at: 2025-09-13T10:30:00Z
        download_url: https://exports.envoyou.com/bundles/exp_2025_q3_gri.zip
    TaxonomyDiff:
      type: object
      properties:
        from: { type: string }
        to: { type: string }
        added:
          type: array
          items: { $ref: '#/components/schemas/MappingChange' }
        removed:
          type: array
          items: { $ref: '#/components/schemas/MappingChange' }
        changed:
          type: array
          items: { $ref: '#/components/schemas/MappingDelta' }
      example:
        from: 2025.1
        to: 2025.2
        added:
          - key: waste_generated_tons
            code: GRI:306-3
        removed: []
        changed:
          - key: scope2_emissions_tco2e
            from: GRI:305-2a
            to: GRI:305-2
    MappingChange:
      type: object
      properties:
        key: { type: string }
        code: { type: string }
    MappingDelta:
      type: object
      properties:
        key: { type: string }
        from: { type: string }
        to: { type: string }
    ErrorResponse:
      type: object
      properties:
        error: { type: string, example: invalid_request }
        message: { type: string, example: Invalid metric parameter }
        request_id: { type: string, example: req_12345 }
        status: { type: integer, example: 400 }
      required: [error, message]
      example:
        error: invalid_request
        message: Invalid metric parameter
        request_id: req_8f3a92
        status: 400
    ValidationError:
      type: object
      properties:
        error: { type: string, example: validation_error }
        message: { type: string, example: One or more fields failed validation }
        status: { type: integer, example: 400 }
        fields:
          type: array
          items:
            type: object
            properties:
              field: { type: string, example: "company_ids[2]" }
              issue: { type: string, example: must be a valid UUID }
      required: [error, message]
      example:
        error: validation_error
        message: One or more fields failed validation
        status: 400
        fields:
          - field: "company_ids[2]"
            issue: must be a valid UUID
  responses:
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    ValidationErrorResponse:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ValidationError' }
    TooManyRequestsError:
      description: Rate limit exceeded
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-RateLimit-Retry-After:
          description: Seconds until requests are accepted again.
          schema: { type: integer, example: 42 }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ErrorResponse' }
    ListMeasurements:
      description: List of measurement objects
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
        X-Pagination-Limit: { $ref: '#/components/headers/PaginationLimit' }
        X-Pagination-Next: { $ref: '#/components/headers/PaginationNext' }
      content:
        application/json:
          schema:
            type: object
            properties:
              items:
                type: array
                items:
                  $ref: '#/components/schemas/Measurement'
    ListStations:
      description: Station list
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
        X-Pagination-Limit: { $ref: '#/components/headers/PaginationLimit' }
        X-Pagination-Next: { $ref: '#/components/headers/PaginationNext' }
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Station'
    ListAlertRules:
      description: Alert rules
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
      content:
        application/json:
          schema:
            type: array
            items: { $ref: '#/components/schemas/AlertRule' }
    AcceptedExport:
      description: Accepted for processing
      headers:
        X-RateLimit-Limit: { $ref: '#/components/headers/RateLimitLimit' }
        X-RateLimit-Remaining: { $ref: '#/components/headers/RateLimitRemaining' }
        X-RateLimit-Reset: { $ref: '#/components/headers/RateLimitReset' }
        X-Request-ID: { $ref: '#/components/headers/RequestID' }
      content:
        application/json:
          schema:
            type: object
            properties:
              export_id: { type: string }
              status: { type: string, example: queued }
